<?php
namespace service\member\object\base;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 图片信息
 */
class CommonImageInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'image_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'host_id',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    3 => array(
      'var' => 'is_default',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    );

  /**
   * 图片IMAGE ID
   * 
   * @var string
   */
  public $image_id = null;
  /**
   * 图片HOST ID
   * 
   * @var int
   */
  public $host_id = null;
  /**
   * 是否默认图
   * 
   * @var int
   */
  public $is_default = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['image_id'])) {
        $this->image_id = $vals['image_id'];
      }
      if (isset($vals['host_id'])) {
        $this->host_id = $vals['host_id'];
      }
      if (isset($vals['is_default'])) {
        $this->is_default = $vals['is_default'];
      }
    }
  }

  public function getName() {
    return 'CommonImageInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->image_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->host_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->is_default);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommonImageInfo');
    if ($this->image_id !== null) {
      $xfer += $output->writeFieldBegin('image_id', TType::STRING, 1);
      $xfer += $output->writeString($this->image_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host_id !== null) {
      $xfer += $output->writeFieldBegin('host_id', TType::I16, 2);
      $xfer += $output->writeI16($this->host_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_default !== null) {
      $xfer += $output->writeFieldBegin('is_default', TType::I16, 3);
      $xfer += $output->writeI16($this->is_default);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 批量信息结果FOR列表
 */
class ListBaseResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'code',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\service\member\object\base\BaseForList',
        ),
      ),
    );

  /**
   * 结果code
   * 
   * @var int
   */
  public $code = null;
  /**
   * 结果信息
   * 
   * @var string
   */
  public $message = "";
  /**
   * 结果数据
   * 
   * @var \service\member\object\base\BaseForList[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'ListBaseResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \service\member\object\base\BaseForList();
              $xfer += $elem5->read($input);
              $this->data []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListBaseResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 批量信息结果FOR单页
 */
class ViewBaseResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'code',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\service\member\object\base\BaseForView',
        ),
      ),
    );

  /**
   * 结果code
   * 
   * @var int
   */
  public $code = null;
  /**
   * 结果信息
   * 
   * @var string
   */
  public $message = "";
  /**
   * 结果数据
   * 
   * @var \service\member\object\base\BaseForView[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'ViewBaseResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \service\member\object\base\BaseForView();
              $xfer += $elem12->read($input);
              $this->data []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ViewBaseResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BaseForList {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    2 => array(
      'var' => 'real_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * id
   * 
   * @var int
   */
  public $id = null;
  /**
   * 真实姓名
   * 
   * @var string
   */
  public $real_name = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['real_name'])) {
        $this->real_name = $vals['real_name'];
      }
    }
  }

  public function getName() {
    return 'BaseForList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->real_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BaseForList');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I16, 1);
      $xfer += $output->writeI16($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->real_name !== null) {
      $xfer += $output->writeFieldBegin('real_name', TType::STRING, 2);
      $xfer += $output->writeString($this->real_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BaseForView {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    2 => array(
      'var' => 'real_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * id
   * 
   * @var int
   */
  public $id = null;
  /**
   * 真实姓名
   * 
   * @var string
   */
  public $real_name = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['real_name'])) {
        $this->real_name = $vals['real_name'];
      }
    }
  }

  public function getName() {
    return 'BaseForView';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->real_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BaseForView');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I16, 1);
      $xfer += $output->writeI16($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->real_name !== null) {
      $xfer += $output->writeFieldBegin('real_name', TType::STRING, 2);
      $xfer += $output->writeString($this->real_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberInfoRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'type_id',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    2 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * 用户类型
   * 
   * @var int
   */
  public $type_id = null;
  /**
   * 用户ID
   * 
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['type_id'])) {
        $this->type_id = $vals['type_id'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'MemberInfoRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->type_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberInfoRequest');
    if ($this->type_id !== null) {
      $xfer += $output->writeFieldBegin('type_id', TType::I16, 1);
      $xfer += $output->writeI16($this->type_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 2);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


